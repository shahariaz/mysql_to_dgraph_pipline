func exportDgraphAdvancedSchema(schema Schema, file string) error {
	f, err := os.Create(file)
	if err != nil {
		return err
	}
	defer f.Close()

	// --- Types Section ---
	for _, t := range schema.Tables {
		fmt.Fprintf(f, "# -------------------\n")
		fmt.Fprintf(f, "# %s\n", t.Name)
		fmt.Fprintf(f, "# -------------------\n")
		fmt.Fprintf(f, "type %s {\n", t.Name)

		for col, typ := range t.Columns {
			dType := mysqlToDgraphType(typ)
			fmt.Fprintf(f, "  %s.%s: %s\n", t.Name, col, dType)
		}

		// Add foreign key edges for this table
		for _, fk := range schema.Relationships {
			if fk.TableName == t.Name {
				fmt.Fprintf(f, "  %s.%s: %s\n", t.Name, fk.ColumnName, fk.RefTableName)
			}
		}

		fmt.Fprintln(f, "}\n")
	}

	// --- Predicates Section ---
	fmt.Fprintf(f, "# ===================\n")
	fmt.Fprintf(f, "# Predicates\n")
	fmt.Fprintf(f, "# ===================\n")

	for _, t := range schema.Tables {
		for col, typ := range t.Columns {
			dType := mysqlToDgraphType(typ)
			predicate := fmt.Sprintf("%s.%s", t.Name, col)

			// Pick default index
			var index string
			switch dType {
			case "string":
				index = "@index(exact)"
			case "int":
				index = "@index(int)"
			case "float":
				index = "@index(float)"
			case "dateTime":
				index = "@index(hour)"
			case "date":
				index = "@index(day)"
			}

			if index != "" {
				fmt.Fprintf(f, "%s: %s %s .\n", predicate, dType, index)
			} else {
				fmt.Fprintf(f, "%s: %s .\n", predicate, dType)
			}
		}
	}

	// Add foreign key edges
	for _, fk := range schema.Relationships {
		fmt.Fprintf(f, "%s.%s: uid @reverse .\n", fk.TableName, fk.ColumnName)
	}

	return nil
}